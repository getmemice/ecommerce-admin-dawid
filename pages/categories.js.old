/* eslint-disable react-hooks/rules-of-hooks */
import Layout from "@/components/Layout"
import axios from "axios"
import { set } from "mongoose"
import { useEffect, useState } from "react"
import { withSwal } from "react-sweetalert2"

export function Categories({ swal }) {
  const [editedCategory, setEditedCategory] = useState(null)
  const [name, setName] = useState("")
  const [parentCategory, setParentCategory] = useState("")
  const [categories, setCategories] = useState([])
  const [properties, setProperties] = useState([])

  const [tests, setTests] = useState([])

  useEffect(() => {
    fetchCategories()
  }, [])

  function fetchCategories() {
    axios.get("/api/categories").then((res) => {
      setCategories(res.data)
    })
  }

  async function saveCategory(e) {
    e.preventDefault()
    const data = {
      name,
      parentCategory,
      properties: properties.map((p) => ({
        name: p.name,
        values: p.values.split(","),
      })),
    }
    if (editedCategory) {
      await axios.put("/api/categories/", { ...data, _id: editedCategory._id })
      setEditedCategory(null)
    } else {
      await axios.post("/api/categories", data)
    }
    setName("")
    setParentCategory("")
    setProperties([])
    fetchCategories()
  }

  function editCategory(category) {
    setEditedCategory(category)
    setName(category.name)
    setParentCategory(category.parent?._id)
    setProperties(
      categories.properties.map(({ name, values }) => ({
        name,
        values: values.join(","),
      }))
    )
  }

  function deleteCategory(category) {
    swal
      .fire({
        title: "Are you sure?",
        text: `Do you want to delete category ${category.name}?`,
        showCancelButton: true,
        cancelButtonText: "Cancel",
        confirmButtonText: "Yes, Delete",
        confirmButtonColor: "#e3342f",
        reverseButtons: true,
      })
      .then(async (result) => {
        if (result.isConfirmed) {
          const _id = category._id
          await axios.delete("/api/categories?_id=" + _id, {
            _id,
          })
          fetchCategories()
        }
      })
      .catch((error) => {
        console.log(error)
      })
  }

  function addProperty() {
    setProperties((prev) => {
      return [...prev, { name: "", values: "" }]
    })
  }

  function handlePropertyNameChange(e, index, newName) {
    e.preventDefault()
    setProperties((prev) => {
      const properties = [...prev]
      properties[index].name = newName
      return properties
    })
  }

  function handlePropertyValueChange(e, index, newValue) {
    e.preventDefault()
    setProperties((prev) => {
      const properties = [...prev]
      properties[index].values = newValue
      return properties
    })
  }

  function removeProperty(index) {
    console.log("in remove index ", index)
    setProperties((prev) => {
      const newProperties = [...prev].filter((_, i) => i !== index)
      return newProperties
    })
  }

  return (
    <Layout>
      <h1>Categories</h1>

      <label>
        {editedCategory
          ? `Edit category ${editedCategory.name}`
          : "Create new category"}
      </label>
      <form onSubmit={saveCategory}>
        <div className="flex gap-1">
          <input
            type="text"
            placeholder={"Category name"}
            onChange={(e) => setName(e.target.value)}
            value={name}
          />
          <select
            onChange={(e) => setParentCategory(e.target.value)}
            value={parentCategory}
          >
            <option value="">No parent category</option>
            {categories.length > 0 &&
              categories.map((category, index) => (
                <option key={index} value={category._id}>
                  {category.name}
                </option>
              ))}
          </select>
        </div>
        <div className="mb-2">
          <label className="block">Properties</label>
          <button
            onClick={addProperty}
            type="button"
            className="text-sm btn-default mb-2"
          >
            Add new property
          </button>
          {properties.length > 0 &&
            properties.map((property, index) => (
              <div key={index} className="flex gap-1 mb-2">
                <input
                  type="text"
                  value={`${property.name}`}
                  className="mb-0"
                  onChange={(e) => {
                    handlePropertyNameChange(e, index, e.target.value)
                  }}
                  placeholder="property name (example: color)"
                />
                <input
                  type="text"
                  className="mb-0"
                  onChange={(e) => {
                    handlePropertyValueChange(e, index, e.target.value)
                  }}
                  value={property.values}
                  placeholder="values, comma separated"
                />
                <button
                  onClick={() => removeProperty(index)}
                  type="button"
                  className="btn-red"
                >
                  Remove
                </button>
              </div>
            ))}
        </div>
        <div className="flex gap-1">
          {editedCategory && (
            <button
              type="button"
              onClick={() => {
                setEditedCategory(null)
                setName("")
                setParentCategory("")
              }}
              className="btn-default"
            >
              Cancel
            </button>
          )}
          <button type="submit" className="py-1 btn-primary">
            Save
          </button>
        </div>
      </form>
      {!!editedCategory && (
        <table className="mt-4 basic">
          <thead>
            <tr>
              <td>Category name</td>
              <td>Parent category</td>
              <td></td>
            </tr>
          </thead>
          <tbody>
            {categories.length > 0 &&
              categories.map((category, _index) => (
                <tr key={_index}>
                  <td>{category.name}</td>
                  <td>{category.parent?.name}</td>
                  <td>
                    <div className="flex">
                      <button
                        type="button"
                        onClick={() => editCategory(category)}
                        className="mr-1 btn-primary"
                      >
                        Edit
                      </button>
                      <button
                        type="button"
                        onClick={() => deleteCategory(category)}
                        className="btn-primary"
                      >
                        Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
          </tbody>
        </table>
      )}
    </Layout>
  )
}

export default withSwal(({ swal }, ref) => <Categories swal={swal} />)
